<Window x:Class="JSON_Viewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:JSON_Viewer"
        xmlns:conv="clr-namespace:JSON_Viewer.Converters"
        xmlns:t="clr-namespace:JSON_Viewer.Themes"
        mc:Ignorable="d" Icon="{StaticResource Icon}" Background="{DynamicResource WindowBack}" Foreground="{DynamicResource Fore}"
        Title="Piped JSON Viewer" Height="450" Width="800" Initialized="Window_Initialized"
        IsEnabled="{Binding IsLoading, Converter={conv:NegateBoolConverter}}" AllowDrop="True" Drop="Window_Drop">

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Themes/Light.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    
    <DockPanel>
        <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" Height="28" Margin="3" HorizontalAlignment="Left">
            <Button Width="24" Height="24" Margin="0 2" Background="{DynamicResource ToolbarBtnBack}" Click="Open_Click">
                <Image Source="{StaticResource Open}" />
            </Button>

            <ComboBox Margin="5 0 0 0" VerticalAlignment="Center" SelectedItem="{Binding CurrentTheme}" ItemsSource="{Binding Themes}"
                      SelectionChanged="Themes_SelectionChanged">
                <ComboBox.ItemTemplate>
                    <DataTemplate DataType="{x:Type t:Theme}">
                        <TextBlock Text="{Binding WpfName}"></TextBlock>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
        </StackPanel>

        <StatusBar DockPanel.Dock="Bottom" Background="{DynamicResource StatusBarBack}">
            <StatusBarItem Visibility="{Binding IsLoading, Converter={local:BoolToVisibilityConverter}}">
                <ProgressBar IsIndeterminate="True" Width="120" Height="15" />
            </StatusBarItem>

            <StatusBarItem>
                <TextBlock Text="{Binding Status}" Foreground="{DynamicResource Fore}" />
            </StatusBarItem>
            
            <StatusBarItem>
                <StatusBarItem.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Copy" Click="CopyPath_Click" />
                    </ContextMenu>
                </StatusBarItem.ContextMenu>
                
                <TextBlock Text="{Binding SelectedPath}" Foreground="{DynamicResource Fore}"></TextBlock>
            </StatusBarItem>

            <StatusBarItem HorizontalAlignment="Right">
                <TextBlock Foreground="{DynamicResource Fore}" ToolTip="Memory usage">
                    <Run Text="{Binding UsedMemoryMB}" />
                    MB used
                </TextBlock>
            </StatusBarItem>
        </StatusBar>

        <StackPanel DockPanel.Dock="Top" Orientation="Horizontal" Margin="0 0 0 5">
            <TextBlock VerticalAlignment="Center" Margin="5 0 0 0" Style="{StaticResource Link}" MouseUp="ExpandAll_Click">
                Expand all
            </TextBlock>
        </StackPanel>

        <Grid DockPanel.Dock="Top">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="4" />
                <ColumnDefinition Width="200" />
            </Grid.ColumnDefinitions>

            <TreeView Grid.Column="0" Name="Tree" ItemsSource="{Binding Items}" BorderBrush="Transparent" Padding="0 5 0 0"
                  VirtualizingPanel.IsVirtualizing="True" Background="{DynamicResource ToolBack}" SelectedItemChanged="Tree_SelectedItemChanged"
                  VirtualizingPanel.VirtualizationMode="Recycling">
                <TreeView.CommandBindings>
                    <CommandBinding Command="ApplicationCommands.Copy" Executed="CommandBinding_Executed" />
                </TreeView.CommandBindings>

                <TreeView.ItemContainerStyle>
                    <Style TargetType="TreeViewItem">
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
                        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=OneWay}" />
                        <Setter Property="local:TreeViewItemHelper.BringSelectedItemIntoView" Value="True" />

                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                <DataTrigger.Setters>
                                    <Setter Property="Background" Value="{DynamicResource TreeSelected}" />
                                </DataTrigger.Setters>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TreeView.ItemContainerStyle>

                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate DataType="{x:Type local:JsonContainer}" ItemsSource="{Binding Path=., Converter={conv:JsonElementToChildrenConverter}}">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{Binding Path=., Converter={conv:JsonElementToStringConverter}, ConverterParameter=name}" Foreground="{DynamicResource PropertyNameFore}"></TextBlock>
                            <TextBlock Text="{Binding Path=., Converter={conv:JsonElementToStringConverter}}" Foreground="{DynamicResource PropertyValueFore}"></TextBlock>
                        </StackPanel>
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
            </TreeView>

            <GridSplitter Grid.Column="1" HorizontalAlignment="Stretch" Background="{DynamicResource SplitterColor}" />

            <StackPanel Grid.Column="2" Orientation="Vertical" Margin="5">
                <TextBlock>Search for text:</TextBlock>
                <TextBox FontSize="14" Text="{Binding SearchState.Query, UpdateSourceTrigger=PropertyChanged}"
                         TextChanged="Query_Changed" Margin="0 5 0 0" KeyDown="Query_KeyDown"></TextBox>
                <Button HorizontalAlignment="Right" Margin="0 5 0 0" Width="60" Height="25" Click="Search_Click" IsEnabled="{Binding AutoSearch, Converter={conv:NegateBoolConverter}}">
                    Search
                </Button>

                <CheckBox IsChecked="{Binding SearchState.SearchInNames}" Checked="UpdateSearchDebounce" Unchecked="UpdateSearchDebounce" Foreground="{DynamicResource Fore}" Margin="0 10 0 0">Search in property names</CheckBox>
                <CheckBox IsChecked="{Binding SearchState.SearchInValues}" Checked="UpdateSearchDebounce" Unchecked="UpdateSearchDebounce" Foreground="{DynamicResource Fore}">Search in values</CheckBox>
                <CheckBox IsChecked="{Binding SearchState.RegexQuery}" Checked="UpdateSearchDebounce" Unchecked="UpdateSearchDebounce" Foreground="{DynamicResource Fore}">Enable regex</CheckBox>
                <CheckBox IsChecked="{Binding AutoSearch}" Checked="UpdateAutoSearch" Unchecked="UpdateAutoSearch" Foreground="{DynamicResource Fore}">Automatically search</CheckBox>

                <StackPanel Orientation="Vertical" Visibility="{Binding SearchState.FoundPaths, Converter={local:NotNullToVisibilityConverter}}">
                    <TextBlock Visibility="{Binding SearchState.AnyMatches, Converter={local:BoolToVisibilityConverter}}">
                        Match
                        <Run Text="{Binding SearchState.CurrentMatchIndexPlusOne, Mode=OneWay}" />
                        /
                        <Run Text="{Binding SearchState.FoundPaths.Length, Mode=OneWay}" />
                    </TextBlock>
                    <TextBlock Visibility="{Binding SearchState.AnyMatches, Converter={local:BoolToVisibilityConverter}, ConverterParameter=negate}">
                        No matches found
                    </TextBlock>

                    <Button Margin="0 5 0 3" Click="PreviousMatch_Click" IsEnabled="{Binding SearchState.CanGoToPreviousMatch}">Previous</Button>
                    <Button Margin="0 0 0 10" Click="NextMatch_Click" IsEnabled="{Binding SearchState.CanGoToNextMatch}">Next</Button>

                    <Button Click="ClearSearch_Click">Clear search results</Button>
                </StackPanel>
            </StackPanel>
        </Grid>
    </DockPanel>
</Window>
