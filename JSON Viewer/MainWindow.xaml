<Window x:Class="JSON_Viewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:JSON_Viewer"
        xmlns:conv="clr-namespace:JSON_Viewer.Converters"
        xmlns:json="clr-namespace:System.Text.Json;assembly=System.Text.Json"
        mc:Ignorable="d" Icon="{StaticResource Icon}" Background="{DynamicResource WindowBack}" Foreground="{DynamicResource Fore}"
        Title="Piped JSON Viewer" Height="450" Width="800" Initialized="Window_Initialized">

    <Window.Resources>
        <ContextMenu x:Key="ItemMenu">
            <ContextMenu.Items>
                <MenuItem Header="asdasd" Click="MenuItem_Click" />
            </ContextMenu.Items>
        </ContextMenu>
    </Window.Resources>

    <DockPanel>
        <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" Height="28" Margin="3" HorizontalAlignment="Left">
            <Button Width="24" Height="24" Margin="0 2" Background="{DynamicResource ToolbarBtnBack}" Click="Open_Click">
                <Image Source="{StaticResource Open}" />
            </Button>

            <CheckBox VerticalAlignment="Center" Margin="5 0 0 0" Foreground="{DynamicResource Fore}"
                      Checked="Dark_Checked" Unchecked="Dark_Unchecked">Dark</CheckBox>
        </StackPanel>

        <StatusBar DockPanel.Dock="Bottom" Background="{DynamicResource StatusBarBack}">
            <StatusBarItem>
                <StatusBarItem.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Copy" Click="CopyPath_Click" />
                    </ContextMenu>
                </StatusBarItem.ContextMenu>
                
                <TextBlock Text="{Binding SelectedPath}" Foreground="{DynamicResource Fore}"></TextBlock>
            </StatusBarItem>
        </StatusBar>

        <Border DockPanel.Dock="Right" Width="200" Padding="5" BorderThickness="1" BorderBrush="Gray">
            <StackPanel Orientation="Vertical">
                <TextBlock>Search for text:</TextBlock>
                <TextBox FontSize="14" Text="{Binding SearchState.Query, UpdateSourceTrigger=PropertyChanged}" TextChanged="UpdateSearchDebounce" Margin="0 5 0 10"></TextBox>

                <CheckBox IsChecked="{Binding SearchState.SearchInNames}" Checked="UpdateSearchDebounce" Unchecked="UpdateSearchDebounce" Foreground="{DynamicResource Fore}">Search in property names</CheckBox>
                <CheckBox IsChecked="{Binding SearchState.SearchInValues}" Checked="UpdateSearchDebounce" Unchecked="UpdateSearchDebounce" Foreground="{DynamicResource Fore}">Search in values</CheckBox>
                <CheckBox IsChecked="{Binding SearchState.RegexQuery}" Checked="UpdateSearchDebounce" Unchecked="UpdateSearchDebounce" Foreground="{DynamicResource Fore}">Enable regex</CheckBox>

                <StackPanel Orientation="Vertical" Visibility="{Binding SearchState.FoundPaths, Converter={local:NotNullToVisibilityConverter}}">
                    <TextBlock Visibility="{Binding SearchState.AnyMatches, Converter={local:BoolToVisibilityConverter}}">
                        Match
                        <Run Text="{Binding SearchState.CurrentMatchIndexPlusOne, Mode=OneWay}" />
                        /
                        <Run Text="{Binding SearchState.FoundPaths.Length, Mode=OneWay}" />
                    </TextBlock>
                    <TextBlock Visibility="{Binding SearchState.AnyMatches, Converter={local:BoolToVisibilityConverter}, ConverterParameter=negate}">
                        No matches found
                    </TextBlock>

                    <Button Margin="0 5 0 3" Click="PreviousMatch_Click" IsEnabled="{Binding SearchState.CanGoToPreviousMatch}">Previous</Button>
                    <Button Margin="0 0 0 10" Click="NextMatch_Click" IsEnabled="{Binding SearchState.CanGoToNextMatch}">Next</Button>
                    
                    <Button Click="ClearSearch_Click">Clear search</Button>
                </StackPanel>
            </StackPanel>
        </Border>

        <TreeView Name="Tree" ItemsSource="{Binding Items}" DockPanel.Dock="Top" BorderBrush="Transparent" Padding="0 5 0 0"
                  VirtualizingPanel.IsVirtualizing="True" Background="{DynamicResource ToolBack}" SelectedItemChanged="Tree_SelectedItemChanged">
            <TreeView.CommandBindings>
                <CommandBinding Command="ApplicationCommands.Copy" Executed="CommandBinding_Executed" />
            </TreeView.CommandBindings>

            <TreeView.ItemContainerStyle>
                <Style TargetType="TreeViewItem">
                    <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=OneWay}" />
                    <Setter Property="Foreground" Value="{DynamicResource Fore}" />
                    <Setter Property="local:TreeViewItemHelper.BringSelectedItemIntoView" Value="True" />

                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsSelected}" Value="True">
                            <DataTrigger.Setters>
                                <Setter Property="Background" Value="{DynamicResource TreeSelected}" />
                            </DataTrigger.Setters>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </TreeView.ItemContainerStyle>
            
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding Path=., Converter={conv:JsonElementToChildrenConverter}}">
                    <TextBlock Text="{Binding Path=., Converter={conv:JsonElementToStringConverter}, ConverterParameter={RelativeSource Mode=PreviousData}}"></TextBlock>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
    </DockPanel>
</Window>
